#include <iostream>
#include <map>       //  для работы с ассоциативным массивом (словарем)
#include <string>

int main() {
    // Создание ассоциативного массива (словаря) для хранения оценок студентов
    std::map<std::string, int> student_grades; // Ключ - имя студента (строка), значение - оценка (целое число)
    
    // Добавление элементов в словарь
    student_grades["Иванов"] = 5;    // Добавление студента "Иванов" с оценкой 5
    student_grades["Петров"] = 4;    // Добавление студента "Петров" с оценкой 4
    student_grades["Сидоров"] = 3;   // Добавление студента "Сидоров" с оценкой 3
    student_grades["Смирнова"] = 5;  // Добавление студента "Смирнова" с оценкой 5
    
    // Вывод размера словаря
    std::cout << "Количество студентов: " << student_grades.size() << std::endl; // Вывод количества элементов
    
    // Доступ к элементу по ключу
    std::cout << "Оценка Петрова: " << student_grades["Петров"] << std::endl; // Вывод оценки Петрова
    
    // Изменение значения по ключу
    student_grades["Сидоров"] = 4; // Изменение оценки Сидорова на 4
    
    // Проверка наличия ключа в словаре
    std::string student_name = "Козлов"; // Имя студента для проверки
    if (student_grades.find(student_name) != student_grades.end()) { // Если студент найден в словаре
        std::cout << "Оценка " << student_name << ": " << student_grades[student_name] << std::endl; // Вывод оценки
    } else { // Если студент не найден
        std::cout << "Студент " << student_name << " не найден" << std::endl; // Сообщение об отсутствии студента
    }
    
    // Добавление нового студента с использованием метода insert
    student_grades.insert(std::pair<std::string, int>("Козлов", 4)); // Добавление студента "Козлов" с оценкой 4
    
    // Безопасный доступ к элементам с проверкой наличия
    auto it = student_grades.find("Козлов"); // Поиск студента "Козлов"
    if (it != student_grades.end()) { // Если студент найден
        std::cout << "Оценка " << it->first << ": " << it->second << std::endl; // Вывод имени и оценки
    }
    
    // Удаление элемента по ключу
    student_grades.erase("Сидоров"); // Удаление студента "Сидоров"
    
    // Вывод всех элементов словаря
    std::cout << "Список всех студентов и их оценок:" << std::endl;
    for (const auto& [name, grade] : student_grades) { // Для каждой пары (имя, оценка) в словаре
        std::cout << name << ": " << grade << std::endl; // Вывод имени и оценки
    }
    
    // Подсчет суммы всех оценок
    int sum = 0; // Переменная для хранения суммы
    for (const auto& [name, grade] : student_grades) { // Для каждой пары (имя, оценка) в словаре
        sum += grade; // Добавление оценки к сумме
    }
    
    // Вычисление среднего балла
    double average = static_cast<double>(sum) / student_grades.size(); // Преобразование суммы в double и деление на количество
    std::cout << "Средний балл: " << average << std::endl; // Вывод среднего балла
    
    return 0;
}
