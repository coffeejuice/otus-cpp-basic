#include <iostream>

class Counter {
public:
    Counter();
    ~Counter();

    // Статический метод не привязан ни к какому объекту.
    // Создается один экземпляр для всех объектов класса.
    static int getCount();

    // Статический член класса является общим для всех экземпляров структуры.
    // Иными словами: статические члены класса не связаны с объектами структуры.
private:
    static int count; // объявляем, но не определяем.
};

// Определяем статический член вне тела структуры.
// Определение статического члена не попадает под действие спецификаторов доступа.
int Counter::count = 0;

Counter::Counter() {
    ++count;
}

Counter::~Counter() {
    --count;
}

int Counter::getCount() {
    // Не имеют *this
    // Не могут обращаться к нестатическим членам.
    return count;
}

void example() {
    // Статические члены структуры существуют, даже если объекты структуры не созданы.
    // Они создаютс при запуске программы и уничтожаются, когда программа
    //  завершает свое выполнение.

    // А вот обратиться к приватному статическому полю уже нельзя.
    // std::cout << Counter::count << '\n';
    std::cout << Counter::getCount() << '\n';

    {
        Counter a;
        std::cout << Counter::getCount() << '\n';

        Counter b;
        std::cout << Counter::getCount() << '\n';
    }

    std::cout << Counter::getCount() << '\n';
}

int main() {
    example();
}
